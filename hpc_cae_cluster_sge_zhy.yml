AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS ParallelCluster Template. Version: aws-parallelcluster-2.5.0'
Parameters:
  AccessFrom:
    Description: Lockdown SSH/HTTP access (default can be accessed from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  AvailabilityZone:
    Description: Availability Zone the cluster will launch into. THIS IS REQUIRED
    Type: 'AWS::EC2::AvailabilityZone::Name'
  VPCId:
    Description: >-
      ID of the VPC you want to provision cluster into. Only used with
      UseVPCBase=false
    Type: 'AWS::EC2::VPC::Id'
  MasterSubnetId:
    Description: ID of the Subnet you want to provision the Master server into
    Type: 'AWS::EC2::Subnet::Id'
  ComputeSubnetId:
    Description: ID of the Subnet you want to provision the Compute Servers into
    Type: 'AWS::EC2::Subnet::Id'
  UsePublicIps:
    Description: >-
      Boolean flag to use public IP's for instances. If false, the VPC must be
      correctly setup to use NAT for all traffic.
    Type: String
    Default: 'true'
    ConstraintDescription: true/false
    AllowedValues:
      - 'true'
      - 'false'
  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instances
      using the default cluster user.
    Type: 'AWS::EC2::KeyPair::KeyName'
  MasterInstanceType:
    Description: MasterServer EC2 instance type
    Type: String
    Default: t3.large
    ConstraintDescription: 'Must be a valid EC2 instance type, with support for HVM.'
    AllowedValues:
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3.4xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
  ComputeInstanceType:
    Description: ComputeFleet EC2 instance type
    Type: String
    Default: c5.xlarge
    ConstraintDescription: 'Must be a valid EC2 instance type, with support for HVM.'
    AllowedValues:
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3.4xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
  CustomAMI:
    Description: 'ID of a Custom ParallelCluster AMI, to use instead of published AMI''s'
    Type: String
    Default: ami-00f46c77d920d811d
    AllowedPattern: '(NONE|^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$)'
  BaseOS:
    Description: Base OS type for cluster AMI
    Type: String
    Default: ubuntu1804
    ConstraintDescription: must be a supported base OS
    AllowedValues:
      - alinux
      - ubuntu1604
      - ubuntu1804
  ClusterType:
    Description: >-
      Type of ParallelCluster to launch. Can either be "ondemand" or "spot". Choosing
      "spot" will cause the ComputeFleet AutoScaling group to launch EC2 Spot
      instances. Default value is "ondemand".
    Type: String
    Default: ondemand
    ConstraintDescription: 'Must be a supported cluster type: ondemand, spot'
    AllowedValues:
      - ondemand
      - spot
  SpotPrice:
    Description: >-
      Spot bid price for the ComputeFleet AutoScaling Group when the ClusterType
      = "spot". When awsbatch is the scheduler, this is spot bid percentage.
    Type: Number
    Default: '0.0'
  MinSize:
    Description: >-
      Initial number of compute EC2 instances / vCpus to launch within the
      cluster.
    Type: Number
    Default: '2'
  DesiredSize:
    Description: >-
      Desired number of compute EC2 instances / vCpus to launch within the
      cluster.
    Type: Number
    Default: '2'
  MaxSize:
    Description: >-
      Maximum number of compute EC2 instances / vCpus to launch within the
      cluster.
    Type: Number
    Default: '10'
  Scheduler:
    Description: Cluster scheduler
    Type: String
    Default: sge
    ConstraintDescription: must be a supported scheduler
    AllowedValues:
      - sge
      - torque
      - slurm
      - awsbatch
  ScaleDownIdleTime:
    Description: 'Period in minutes without jobs after which compute node will terminate '
    Type: String
    Default: '10'
  Placement:
    Description: >-
      Type of placement requird in AWS ParallelCluster, it can either be cluster
      or compute.
    Type: String
    Default: compute
    AllowedValues:
      - cluster
      - compute
  PlacementGroup:
    Description: The name of an existing placement group
    Type: String
    Default: NONE
  Cores:
    Description: >-
      Comma seperated string of [master cores], [compute cores]. If set to -1,-1
      no CpuOptions are set.
    Type: CommaDelimitedList
    Default: '-1,-1'
  EFA:
    Description: 'Enable EFA on the compute nodes, enable_efa = compute'
    Type: String
    Default: NONE
  DCVOptions:
    Description: >-
      Comma separated list of NICE DCV related options, 3 parameters in total,
      [enabled,port,access_from]
    Type: String
    Default: 'NONE,NONE,NONE'
  ProxyServer:
    Description: >-
      hostname and port of HTTP proxy server for cfn-init, boto and yum i.e.
      proxy.example.com:8080
    Type: String
    Default: NONE
  PreInstallScript:
    Description: Preinstall script URL. This is run before any host configuration.
    Type: String
    Default: NONE
  PostInstallScript:
    Description: Postinstall script URL. This is run before any host configuration.
    Type: String
    Default: s3://nice-enginframe-cn-north-1/2019.0-r915/enginframe_post_v4.sh
  CustomChefCookbook:
    Description: >-
      URL of custom cookbook that will override the default. This will be
      unpacked and then dependencies resolved with Berkshelf.
    Type: String
    Default: NONE
  S3ReadResource:
    Description: S3 resource with read access from AWS ParallelCluster nodes
    Type: String
    Default: NONE
  S3ReadWriteResource:
    Description: >-
      Addtional policy document to be added to EC2 IAM role created and assigned
      to all nodes.
    Type: String
    Default: arn:aws-cn:s3:::nice-enginframe-cn-north-1/2019.0-r915/*
  ResourcesS3Bucket:
    Description: >-
      S3 bucket where resources needed by the stack are located. The bucket gets
      deleted on stack deletion.
    Type: String
    Default: NONE
  SharedDir:
    Description: The path/mountpoint for the shared drive
    Type: String
    Default: /shareEBS,/opt/nice/enginframe/spoolers,/opt/nice/enginframe/data,/opt/nice/enginframe/sessions,NONE
  NumberOfEBSVol:
    Description: 'Number of EBS Volumes the user requested, up to 5'
    Type: Number
    Default: '4'
  RAIDOptions:
    Description: Comma Separated List of RAID options
    Type: String
    Default: 'NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE'
    AllowedPattern: >-
      ^(NONE|.+)(,|, )(NONE|\d)(,|, )(NONE|\d)(,|,
      )(NONE|standard|io1|gp2|st1|sc1)(,|, )(NONE|\d+)(,|, )(NONE|\d+)(,|,
      )(NONE|true|false)(,|, )(NONE|.+)$
  EFSOptions:
    Description: >-
      Comma separated list of efs related options, 8 parameters in total,
      [shared_dir,efs_fs_id,performance_mode,efs_kms_key_id,provisioned_throughput,encrypted,throughput_mode,valid_existing_MTorNot]
    Type: String
    Default: 'NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE'
  EnginFrameAdminPassword:
    Description: >-
      Password for the EnginFrame admin user (efadmin). Must be at least 8
      characters with at least three of these attributes: lowercase, uppercase,
      number and symbols
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: >-
      (?=^.{8,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Default: 'p@ssw0rd'
    NoEcho: 'true'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Basic Configuration
        Parameters:
          - AccessFrom
          - AvailabilityZone
          - VPCId
          - MasterSubnetId
          - ComputeSubnetId
          - UsePublicIps
          - KeyName
      - Label:
          default: ParallelCluster Configuration
        Parameters:
          - MasterInstanceType
          - ComputeInstanceType
          - CustomAMI
          - BaseOS
          - ClusterType
          - SpotPrice
          - MinSize
          - DesiredSize
          - MaxSize
          - Scheduler
          - ScaleDownIdleTime
          - Placement
          - PlacementGroup
          - Cores
          - EFA
          - DCVOptions
      - Label:
          default: Setup Configuration
        Parameters:
          - ProxyServer
          - PreInstallScript
          - PostInstallScript
          - CustomChefCookbook
          - S3ReadResource
          - S3ReadWriteResource
          - ResourcesS3Bucket
      - Label:
          default: Shared Storage Configuration
        Parameters:
          - SharedDir
          - NumberOfEBSVol
          - RAIDOptions
          - EFSOptions
      - Label:
          default: EnginFrame Configuration
        Parameters:
          - EnginFrameAdminPassword          
Conditions:
  CreateEFSSubstack: !Not 
    - !Equals 
      - !Select 
        - '0'
        - !Split 
          - ','
          - !Ref EFSOptions
      - NONE
  CreateRAIDSubstack: !Not 
    - !Equals 
      - NONE
      - !Select 
        - '0'
        - !Split 
          - ','
          - !Ref RAIDOptions
  UseSpotInstances: !Equals 
    - !Ref ClusterType
    - spot
  UseSpotPrice: !Not 
    - !Equals 
      - !Ref SpotPrice
      - '0'
  UseCustomAMI: !Not 
    - !Equals 
      - !Ref CustomAMI
      - NONE
  UseProxy: !Not 
    - !Equals 
      - !Ref ProxyServer
      - NONE
  MasterPublicIp: !Equals 
    - !Ref UsePublicIps
    - 'true'
  UseS3ReadPolicy: !Not 
      - !Equals 
        - !Ref S3ReadResource
        - NONE
  UsePlacementGroup: !Not 
    - !Equals 
      - !Ref PlacementGroup
      - NONE
  UseClusterPlacement: !And 
    - !Equals 
      - !Ref Placement
      - cluster
    - !Condition UsePlacementGroup
  UseS3ReadWritePolicy: !Not 
      - !Equals 
        - !Ref S3ReadWriteResource
        - NONE
  CreatePlacementGroup: !And 
    - !Equals 
      - !Ref PlacementGroup
      - DYNAMIC
    - !Condition UsePlacementGroup
  CreateComputeFleet: !Not 
    - !Equals 
      - !Ref Scheduler
      - awsbatch
  CreateAWSBatchStack: !Equals 
    - !Ref Scheduler
    - awsbatch
  HasResourcesS3Bucket: !Not 
    - !Equals 
      - !Ref ResourcesS3Bucket
      - NONE
  EnableEFA: !Not 
    - !Equals 
      - !Ref EFA
      - NONE
  DisableHyperthreading: !Not 
    - !Equals 
      - !Select 
        - '0'
        - !Ref Cores
      - '-1'
  EnableDCV: !Equals 
    - !Select 
      - '0'
      - !Split 
        - ','
        - !Ref DCVOptions
    - master
  UseMasterSubnetForCompute: !Equals 
      - !Ref ComputeSubnetId
      - !Ref MasterSubnetId
  ComputePublicIps: !And 
    - !Equals 
      - !Ref UsePublicIps
      - 'true'
    - !Condition UseMasterSubnetForCompute
Mappings:
  AWSRegionOS2AMI:
    cn-north-1:
      alinux: ami-02d8c4f46ddaa963f
      ubuntu1604: ami-0be283f7ce8800c88
      ubuntu1804: ami-048c92cbf8cf39045
    cn-northwest-1:
      alinux: ami-0ab8a54fbf54abb1f
      ubuntu1604: ami-09e41a30a1b8ddf12
      ubuntu1804: ami-0a46aab69758b32c7
  OSFeatures:
    alinux:
      User: ec2-user
      RootDevice: /dev/xvda
    ubuntu1604:
      User: ubuntu
      RootDevice: /dev/sda1
    ubuntu1804:
      User: ubuntu
      RootDevice: /dev/sda1
  Partition2Url:
    aws:
      url: amazonaws.com
    aws-cn:
      url: amazonaws.com.cn
  PackagesVersions:
    default:
      parallelcluster: 2.5.0
      cookbook: aws-parallelcluster-cookbook-2.5.0
      chef: 14.2.0
      ridley: 5.1.1
      berkshelf: 7.0.4
      ami: dev
  Conf:
    EnginFrame:
      Version: 2019.0-r915
      BucketBasename: nice-enginframe
Resources:
  EFSSubstack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        EFSOptions: !Ref EFSOptions
        ComputeSecurityGroup: !Ref ComputeSecurityGroup
        SubnetId: !Ref MasterSubnetId
      TemplateURL: !Sub 
        - >-
          https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/efs-substack-${version}.cfn.json
        - s3_url: !FindInMap 
            - Partition2Url
            - !Ref 'AWS::Partition'
            - url
          version: !FindInMap 
            - PackagesVersions
            - default
            - parallelcluster
    Condition: CreateEFSSubstack
  SQS:
    Type: 'AWS::SQS::Queue'
    Properties:
      MessageRetentionPeriod: 1209600
  SQSPolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Id: MyQueuePolicy
        Statement:
          - Sid: Allow-SendMessage-From-AS-SNS-Topic
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'sqs:SendMessage'
            Resource: '*'
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref SNS
      Queues:
        - !Ref SQS
  SNS:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !GetAtt 
            - SQS
            - Arn
          Protocol: sqs
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: instanceId
          AttributeType: S
      KeySchema:
        - AttributeName: instanceId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 
                  - 'ec2.${s3_url}'
                  - s3_url: !FindInMap 
                      - Partition2Url
                      - !Ref 'AWS::Partition'
                      - url
            Action:
              - 'sts:AssumeRole'
      Path: /
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles: 
        - !Ref RootRole
  ParallelClusterPolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: ParallelClusterPolicy
      PolicyDocument:
        Statement:
          - Sid: EC2
            Action:
              - 'ec2:DescribeVolumes'
              - 'ec2:AttachVolume'
              - 'ec2:DescribeInstanceAttribute'
              - 'ec2:DescribeInstanceStatus'
              - 'ec2:DescribeInstances'
            Effect: Allow
            Resource:
              - '*'
          - Sid: DynamoDBList
            Action:
              - 'dynamodb:ListTables'
            Effect: Allow
            Resource:
              - '*'
          - Sid: SQSQueue
            Action:
              - 'sqs:SendMessage'
              - 'sqs:ReceiveMessage'
              - 'sqs:ChangeMessageVisibility'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueUrl'
            Effect: Allow
            Resource:
              - !GetAtt 
                - SQS
                - Arn
          - Sid: Autoscaling
            Action:
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:TerminateInstanceInAutoScalingGroup'
              - 'autoscaling:SetDesiredCapacity'
              - 'autoscaling:UpdateAutoScalingGroup'
              - 'autoscaling:DescribeTags'
              - 'autoscaling:SetInstanceHealth'
            Effect: Allow
            Resource:
              - '*'
          - Sid: CloudWatch
            Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
          - Sid: SQSList
            Action:
              - 'sqs:ListQueues'
            Effect: Allow
            Resource:
              - '*'
          - Sid: Cloudformation
            Action:
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeStackResource'
            Effect: Allow
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
          - Sid: DynamoDBTable
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:DescribeTable'
            Effect: Allow
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}
          - Sid: S3GetObj
            Action:
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${AWS::Region}-aws-parallelcluster/*'
          - Sid: S3PutObj
            Action:
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/batch/*'
          - Sid: BatchJobPassRole
            Action:
              - 'iam:PassRole'
            Effect: Allow
            Resource:
              - !Sub >-
                arn:${AWS::Partition}:iam::${AWS::AccountId}:role/parallelcluster-*
          - Sid: DcvLicense
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::dcv-license.${AWS::Region}/*'
      Roles:
        - !Ref RootRole
  ParallelClusterExtendedPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles:
        - !Ref RootRole
      PolicyName: ParallelClusterExtendedPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: s3
            Effect: Allow
            Resource:
              - !Sub 
                - 'arn:aws-cn:s3:::${BucketBasename}-${Region}/${Version}/*'
                - BucketBasename: !FindInMap 
                    - Conf
                    - EnginFrame
                    - BucketBasename
                  Region: !Ref 'AWS::Region'
                  Version: !FindInMap 
                    - Conf
                    - EnginFrame
                    - Version
            Action:
              - 's3:GetObject'
          - Sid: cloudformation
            Effect: Allow
            Resource:
              - !Sub >-
                arn:aws-cn:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - !Sub >-
                arn:aws-cn:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/cfncluster-*/*
            Action:
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeStackResource'
              - 'cloudformation:DescribeStackResources'
          - Sid: elb
            Effect: Allow
            Resource: '*'
            Action:
              - 'elasticloadbalancing:RegisterTargets'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:DescribeLoadBalancers'
              - 'elasticloadbalancing:CreateTargetGroup'
              - 'elasticloadbalancing:CreateRule'
              - 'elasticloadbalancing:DescribeRules'
              - 'elasticloadbalancing:DescribeListeners'
              - 'elasticloadbalancing:AddTags'
          - Sid: ec2
            Effect: Allow
            Resource: '*'
            Action:
              - 'ec2:DescribeVpcs'
              - 'ec2:DescribeSubnets'
          - Sid: kms
            Effect: Allow
            Resource: '*'
            Action:
              - 'kms:Decrypt'
          - Sid: iam
            Effect: Allow
            Resource:
              - !GetAtt 
                - RootRole
                - Arn
            Action:
              - 'iam:GetRole'
              - 'iam:PutRolePolicy'
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: logs
                Effect: Allow
                Resource: 'arn:aws-cn:logs:*:*:*'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
              - Sid: iam
                Effect: Allow
                Resource: '*'
                Action:
                  - 'iam:UploadServerCertificate'
                  - 'iam:DeleteServerCertificate'
                  - 'iam:ListRolePolicies'
                  - 'iam:DeleteRolePolicy'
              - Sid: ec2
                Effect: Allow
                Resource: '*'
                Action:
                  - 'ec2:CreateTags'
                  - 'ec2:DescribeTags'
  S3ReadRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3Read
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3Read
            Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource:
              - !Ref S3ReadResource
      Roles:
        - !Ref RootRole
    Condition: UseS3ReadPolicy
  S3ReadWriteRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3ReadWrite
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3ReadWrite
            Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Ref S3ReadWriteResource
      Roles:
        - !Ref RootRole
    Condition: UseS3ReadWritePolicy
  MasterEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
    Condition: MasterPublicIp
  MasterServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref MasterServerLaunchTemplate
        Version: !GetAtt 
          - MasterServerLaunchTemplate
          - LatestVersionNumber
  MasterServerLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref MasterInstanceType
        CpuOptions:
          CoreCount: !If 
            - DisableHyperthreading
            - !Select 
              - '0'
              - !Ref Cores
            - !Ref 'AWS::NoValue'
          ThreadsPerCore: !If 
            - DisableHyperthreading
            - 1
            - !Ref 'AWS::NoValue'
        BlockDeviceMappings:
          - DeviceName: /dev/xvdba
            VirtualName: ephemeral0
          - DeviceName: /dev/xvdbb
            VirtualName: ephemeral1
          - DeviceName: /dev/xvdbc
            VirtualName: ephemeral2
          - DeviceName: /dev/xvdbd
            VirtualName: ephemeral3
          - DeviceName: /dev/xvdbe
            VirtualName: ephemeral4
          - DeviceName: /dev/xvdbf
            VirtualName: ephemeral5
          - DeviceName: /dev/xvdbg
            VirtualName: ephemeral6
          - DeviceName: /dev/xvdbh
            VirtualName: ephemeral7
          - DeviceName: /dev/xvdbi
            VirtualName: ephemeral8
          - DeviceName: /dev/xvdbj
            VirtualName: ephemeral9
          - DeviceName: /dev/xvdbk
            VirtualName: ephemeral10
          - DeviceName: /dev/xvdbl
            VirtualName: ephemeral11
          - DeviceName: /dev/xvdbm
            VirtualName: ephemeral12
          - DeviceName: /dev/xvdbn
            VirtualName: ephemeral13
          - DeviceName: /dev/xvdbo
            VirtualName: ephemeral14
          - DeviceName: /dev/xvdbp
            VirtualName: ephemeral15
          - DeviceName: /dev/xvdbq
            VirtualName: ephemeral16
          - DeviceName: /dev/xvdbr
            VirtualName: ephemeral17
          - DeviceName: /dev/xvdbs
            VirtualName: ephemeral18
          - DeviceName: /dev/xvdbt
            VirtualName: ephemeral19
          - DeviceName: /dev/xvdbu
            VirtualName: ephemeral20
          - DeviceName: /dev/xvdbv
            VirtualName: ephemeral21
          - DeviceName: /dev/xvdbw
            VirtualName: ephemeral22
          - DeviceName: /dev/xvdbx
            VirtualName: ephemeral23
          - DeviceName: !FindInMap 
              - OSFeatures
              - !Ref BaseOS
              - RootDevice
            Ebs:
              VolumeSize: '25'
              VolumeType: gp2
        KeyName: !Ref KeyName
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Application
                Value: !Ref 'AWS::StackName'
              - Key: Name
                Value: Master
              - Key: ClusterName
                Value: !Ref 'AWS::StackName'
              - Key: aws-parallelcluster-attributes
                Value: !Sub 
                  - '${BaseOS}, ${Scheduler}, ${version}'
                  - version: !FindInMap 
                      - PackagesVersions
                      - default
                      - parallelcluster
              - Key: aws-parallelcluster-networking
                Value: !Sub 'EFA=${EFA}'
              - Key: aws-parallelcluster-filesystem
                Value: !Sub 
                  - >-
                    efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid},
                    fsx=${fsx}
                  - efs: !If 
                      - CreateEFSSubstack
                      - '1'
                      - '0'
                    raid: !If 
                      - CreateRAIDSubstack
                      - '1'
                      - '0'
                    fsx: '0'
        NetworkInterfaces:
          - NetworkInterfaceId: !Ref MasterENI
            DeviceIndex: 0
        ImageId: !If 
          - UseCustomAMI
          - !Ref CustomAMI
          - !FindInMap 
            - AWSRegionOS2AMI
            - !Ref 'AWS::Region'
            - !Ref BaseOS
        EbsOptimized: false
        IamInstanceProfile:
          Name: !Ref RootInstanceProfile
        Placement:
          GroupName: !If 
            - UseClusterPlacement
            - !If 
              - CreatePlacementGroup
              - !Ref DynamicPlacementGroup
              - !Ref PlacementGroup
            - !Ref 'AWS::NoValue'
        UserData: !Base64 
          'Fn::Join':
            - ''
            - - |
                Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              - |+
                MIME-Version: 1.0

              - |
                --==BOUNDARY==
              - |
                Content-Type: text/cloud-config; charset="us-ascii"
              - |+
                MIME-Version: 1.0

              - |
                #cloud-config:
              - |
                runcmd:
              - ' - [ sh, -c, ''which yum && echo "proxy='
              - !If 
                - UseProxy
                - !Ref ProxyServer
                - _none_
              - |
                " >> /etc/yum.conf || echo "Not yum system"' ]
              - ' - [ sh, -c, ''which apt-get && echo "Acquire::http::Proxy \"'
              - !If 
                - UseProxy
                - !Ref ProxyServer
                - 'false'
              - |
                \";" >> /etc/apt/apt.conf || echo "Not apt system"' ]
              - |
                --==BOUNDARY==
              - |
                Content-Type: text/x-shellscript; charset="us-ascii"
              - |+
                MIME-Version: 1.0

              - |+
                #!/bin/bash -x

              - |
                function error_exit
              - |
                {
              - '  cfn-signal ${proxy_args} --exit-code=1 --reason="$1" --stack='
              - !Ref 'AWS::StackName'
              - ' --resource=MasterServerWaitCondition --region='
              - !Ref 'AWS::Region'
              - |+

              - |2
                  exit 1
              - |
                }
              - |
                function vendor_cookbook
              - |
                {
              - |2
                  mkdir /tmp/cookbooks
              - |2
                  cd /tmp/cookbooks
              - |2
                  tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz
              - |2
                  HOME_BAK="${HOME}"
              - |2
                  export HOME="/tmp"
              - |2
                  . /tmp/proxy.sh;
              - |2
                  for d in `ls /tmp/cookbooks`; do
              - |2
                    cd /tmp/cookbooks/$d
              - |2
                    LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'
              - |2
                  done;
              - |2
                  export HOME="${HOME_BAK}"
              - |
                }
              - |
                function bootstrap_instance
              - |
                {
              - |2
                  which yum 2>/dev/null; yum=$?
              - |2
                  which apt-get 2>/dev/null; apt=$?
              - |2
                  if [ "${yum}" == "0" ]; then
              - |2
                    yum -y groupinstall development && yum -y install curl wget jq awscli
              - |2
                  fi
              - |2
                  if [ "${apt}" == "0" ]; then
              - |2
                    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli
              - |2
                  fi
              - |2
                  [[ ${_region} =~ ^cn- ]] && s3_url="cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster"
              - |2
                  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)
              - |2
                  mkdir -p /etc/chef && chown -R root:root /etc/chef
              - |2
                  curl --retry 3 -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}
              - |2
                  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version} ffi-libarchive
              - |2
                  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}
              - |2
                  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date
              - |2
                  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5
              - |2
                  vendor_cookbook
              - |2
                  mkdir /opt/parallelcluster && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped
              - |
                }
              - proxy=
              - !Ref ProxyServer
              - |+

              - custom_cookbook=
              - !Ref CustomChefCookbook
              - |+

              - |
                if [ "${proxy}" != "NONE" ]; then
              - |2
                  proxy_args="--http-proxy=${proxy} --https-proxy=${proxy}"
              - |2
                  proxy_host=$(echo "${proxy}" | awk -F/ '{print $3}' | cut -d: -f1)
              - |2
                  proxy_port=$(echo "${proxy}" | awk -F/ '{print $3}' | cut -d: -f2)
              - |2
                  export http_proxy=${proxy}; export https_proxy=${http_proxy}
              - |2
                  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}
              - |2
                  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
              - |2
                  echo -e "export http_proxy=${proxy}; export https_proxy=${http_proxy}
                export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}
                export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
                " >/tmp/proxy.sh
              - |2
                  echo -e "[Boto]
                proxy = ${proxy_host}
                proxy_port = ${proxy_port}
                " >/etc/boto.cfg
              - |
                else
              - |2
                  proxy_args=""
              - |2
                  touch /tmp/proxy.sh
              - |
                fi
              - '  export _region='
              - !Ref 'AWS::Region'
              - |+

              - s3_url=
              - !FindInMap 
                - Partition2Url
                - !Ref 'AWS::Partition'
                - url
              - |+

              - |
                if [ "${custom_cookbook}" != "NONE" ]; then
              - |2
                  cookbook_url=${custom_cookbook}
              - |
                else
              - '  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/'
              - !FindInMap 
                - PackagesVersions
                - default
                - cookbook
              - |
                .tgz
              - |
                fi
              - >
                export
                PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
              - export parallelcluster_version=aws-parallelcluster-
              - !FindInMap 
                - PackagesVersions
                - default
                - parallelcluster
              - |+

              - export cookbook_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - cookbook
              - |+

              - export chef_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - chef
              - |+

              - export ridley_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - ridley
              - |+

              - export berkshelf_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - berkshelf
              - |+

              - |
                if [ -f /opt/parallelcluster/.bootstrapped ]; then
              - |2
                  installed_version=$(cat /opt/parallelcluster/.bootstrapped)
              - |2
                  if [ "${parallelcluster_version}" != "${installed_version}" ]; then
              - |2
                    bootstrap_instance
              - |2
                  fi
              - |
                else
              - |2
                  bootstrap_instance
              - |
                fi
              - |
                if [ "${custom_cookbook}" != "NONE" ]; then
              - |2
                  curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z "$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)" ${cookbook_url}
              - |2
                  vendor_cookbook
              - |
                fi
              - |
                cd /tmp
              - |
                # Call CloudFormation
              - 'cfn-init ${proxy_args} -s '
              - !Ref 'AWS::StackName'
              - ' -v -c default -r MasterServerLaunchTemplate --region '
              - !Ref 'AWS::Region'
              - |2
                 || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'
              - >-
                cfn-signal ${proxy_args} --exit-code=0 --reason="MasterServer
                setup complete" --stack=
              - !Ref 'AWS::StackName'
              - ' --resource=MasterServerWaitCondition --region='
              - !Ref 'AWS::Region'
              - |+

              - |
                # End of file
              - |
                --==BOUNDARY==
    Metadata:
      Comment: AWS ParallelCluster Master server
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - deployConfigFiles
            - chefPrepEnv
            - shellRunPreInstall
            - chefConfig
            - shellRunPostInstall
            - chefFinalize
        deployConfigFiles:
          files:
            /tmp/dna.json:
              mode: '000644'
              owner: root
              group: root
              content:
                cfncluster:
                  stack_name: !Ref 'AWS::StackName'
                  enable_efa: !Ref EFA
                  cfn_raid_vol_ids: !If 
                    - CreateRAIDSubstack
                    - !GetAtt 
                      - RAIDSubstack
                      - Outputs.Volumeids
                    - !Ref 'AWS::NoValue'
                  cfn_raid_parameters: !Ref RAIDOptions
                  cfn_scheduler_slots: !If 
                    - DisableHyperthreading
                    - !Select 
                      - '1'
                      - !Ref Cores
                    - !Ref 'AWS::NoValue'
                  cfn_base_os: !Ref BaseOS
                  cfn_preinstall: !Ref PreInstallScript
                  cfn_preinstall_args: NONE
                  cfn_postinstall: !Ref PostInstallScript
                  cfn_postinstall_args: NONE
                  cfn_region: !Ref 'AWS::Region'
                  cfn_efs: !If 
                    - CreateEFSSubstack
                    - !GetAtt 
                      - EFSSubstack
                      - Outputs.FileSystemId
                    - ''
                  cfn_efs_shared_dir: !Ref EFSOptions
                  cfn_fsx_fs_id: ''
                  cfn_fsx_options: 'NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE'
                  cfn_volume: !GetAtt 
                    - EBSCfnStack
                    - Outputs.Volumeids
                  cfn_scheduler: !Ref Scheduler
                  cfn_encrypted_ephemeral: 'false'
                  cfn_ephemeral_dir: /scratch
                  cfn_shared_dir: !Ref SharedDir
                  cfn_proxy: !Ref ProxyServer
                  cfn_max_queue_size: !Ref MaxSize
                  compute_instance_type: !Ref ComputeInstanceType
                  cfn_node_type: MasterServer
                  cfn_cluster_user: !FindInMap 
                    - OSFeatures
                    - !Ref BaseOS
                    - User
                  cfn_ddb_table: !Ref DynamoDBTable
                  cfn_sqs_queue: !GetAtt 
                    - SQS
                    - QueueName
                  dcv_enabled: !If 
                    - EnableDCV
                    - master
                    - 'false'
                  dcv_port: !Select 
                    - '1'
                    - !Split 
                      - ','
                      - !Ref DCVOptions
                  enable_intel_hpc_platform: 'false'
                run_list: !Sub 'recipe[aws-parallelcluster::${Scheduler}_config]'
            /etc/chef/client.rb:
              mode: '000644'
              owner: root
              group: root
              content: !Join 
                - ''
                - - 'cookbook_path [''/etc/chef/cookbooks'']'
            /tmp/extra.json:
              mode: '000644'
              owner: root
              group: root
              content: '{"cluster": {"cfn_scheduler_slots": "cores"}}'
          commands:
            mkdir:
              command: mkdir -p /etc/chef/ohai/hints
            touch:
              command: touch /etc/chef/ohai/hints/ec2.json
            jq:
              command: >-
                jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n
                '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' >
                /etc/chef/dna.json || ( echo "jq not installed"; cp
                /tmp/dna.json /etc/chef/dna.json )
        chefPrepEnv:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json --override-runlist
                aws-parallelcluster::_prep_env
              cwd: /etc/chef
        shellRunPreInstall:
          commands:
            runpreinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -preinstall
        chefConfig:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json
              cwd: /etc/chef
        shellRunPostInstall:
          commands:
            runpostinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -postinstall
        chefFinalize:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json --override-runlist
                aws-parallelcluster::finalize
              cwd: /etc/chef
  MasterServerWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn:
      - MasterServer
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT30M
  ComputeFleet:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MaxSize: !Ref MaxSize
      VPCZoneIdentifier:
        - !Ref ComputeSubnetId
      LaunchTemplate:
        LaunchTemplateId: !Ref ComputeServerLaunchTemplate
        Version: !GetAtt 
          - ComputeServerLaunchTemplate
          - LatestVersionNumber
      MinSize: !Ref MinSize
      DesiredCapacity: !Ref DesiredSize
      NotificationConfigurations:
        - TopicARN: !Ref SNS
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
      Tags:
        - Key: Name
          Value: Compute
          PropagateAtLaunch: true
        - Key: ClusterName
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: Application
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: aws-parallelcluster-attributes
          Value: !Sub 
            - '${BaseOS}, ${Scheduler}, ${version}'
            - version: !FindInMap 
                - PackagesVersions
                - default
                - parallelcluster
          PropagateAtLaunch: true
        - Key: aws-parallelcluster-networking
          Value: !Sub 'EFA=${EFA}'
          PropagateAtLaunch: true
        - Key: aws-parallelcluster-filesystem
          Value: !Sub 
            - 'efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}'
            - efs: !If 
                - CreateEFSSubstack
                - '1'
                - '0'
              raid: !If 
                - CreateRAIDSubstack
                - '1'
                - '0'
          PropagateAtLaunch: true
      PlacementGroup: !If 
        - UsePlacementGroup
        - !If 
          - CreatePlacementGroup
          - !Ref DynamicPlacementGroup
          - !Ref PlacementGroup
        - !Ref 'AWS::NoValue'
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
        Count: !Ref DesiredSize
    Condition: CreateComputeFleet
  ComputeServerLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        NetworkInterfaces:
          - DeviceIndex: 0
            InterfaceType: !If 
              - EnableEFA
              - efa
              - !Ref 'AWS::NoValue'
            Groups: 
              - !Ref ComputeSecurityGroup
            AssociatePublicIpAddress: !If 
              - ComputePublicIps
              - true
              - false
        InstanceType: !Ref ComputeInstanceType
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref RootInstanceProfile
        InstanceMarketOptions: !If 
          - UseSpotInstances
          - SpotOptions:
              SpotInstanceType: one-time
              InstanceInterruptionBehavior: terminate
              MaxPrice: !If 
                - UseSpotPrice
                - !Ref SpotPrice
                - !Ref 'AWS::NoValue'
            MarketType: spot
          - !Ref 'AWS::NoValue'
        ImageId: !If 
          - UseCustomAMI
          - !Ref CustomAMI
          - !FindInMap 
            - AWSRegionOS2AMI
            - !Ref 'AWS::Region'
            - !Ref BaseOS
        CpuOptions:
          CoreCount: !If 
            - DisableHyperthreading
            - !Select 
              - '1'
              - !Ref Cores
            - !Ref 'AWS::NoValue'
          ThreadsPerCore: !If 
            - DisableHyperthreading
            - 1
            - !Ref 'AWS::NoValue'
        Monitoring:
          Enabled: false
        BlockDeviceMappings:
          - DeviceName: /dev/xvdba
            VirtualName: ephemeral0
          - DeviceName: /dev/xvdbb
            VirtualName: ephemeral1
          - DeviceName: /dev/xvdbc
            VirtualName: ephemeral2
          - DeviceName: /dev/xvdbd
            VirtualName: ephemeral3
          - DeviceName: /dev/xvdbe
            VirtualName: ephemeral4
          - DeviceName: /dev/xvdbf
            VirtualName: ephemeral5
          - DeviceName: /dev/xvdbg
            VirtualName: ephemeral6
          - DeviceName: /dev/xvdbh
            VirtualName: ephemeral7
          - DeviceName: /dev/xvdbi
            VirtualName: ephemeral8
          - DeviceName: /dev/xvdbj
            VirtualName: ephemeral9
          - DeviceName: /dev/xvdbk
            VirtualName: ephemeral10
          - DeviceName: /dev/xvdbl
            VirtualName: ephemeral11
          - DeviceName: /dev/xvdbm
            VirtualName: ephemeral12
          - DeviceName: /dev/xvdbn
            VirtualName: ephemeral13
          - DeviceName: /dev/xvdbo
            VirtualName: ephemeral14
          - DeviceName: /dev/xvdbp
            VirtualName: ephemeral15
          - DeviceName: /dev/xvdbq
            VirtualName: ephemeral16
          - DeviceName: /dev/xvdbr
            VirtualName: ephemeral17
          - DeviceName: /dev/xvdbs
            VirtualName: ephemeral18
          - DeviceName: /dev/xvdbt
            VirtualName: ephemeral19
          - DeviceName: /dev/xvdbu
            VirtualName: ephemeral20
          - DeviceName: /dev/xvdbv
            VirtualName: ephemeral21
          - DeviceName: /dev/xvdbw
            VirtualName: ephemeral22
          - DeviceName: /dev/xvdbx
            VirtualName: ephemeral23
          - DeviceName: !FindInMap 
              - OSFeatures
              - !Ref BaseOS
              - RootDevice
            Ebs:
              VolumeSize: '25'
              VolumeType: gp2
        UserData: !Base64 
          'Fn::Join':
            - ''
            - - |
                Content-Type: multipart/mixed; boundary="==BOUNDARY=="
              - |+
                MIME-Version: 1.0

              - |
                --==BOUNDARY==
              - |
                Content-Type: text/cloud-config; charset="us-ascii"
              - |+
                MIME-Version: 1.0

              - |
                #cloud-config:
              - |
                runcmd:
              - ' - [ sh, -c, ''which yum && echo "proxy='
              - !If 
                - UseProxy
                - !Ref ProxyServer
                - _none_
              - |
                " >> /etc/yum.conf || echo "Not yum system"' ]
              - ' - [ sh, -c, ''which apt-get && echo "Acquire::http::Proxy \"'
              - !If 
                - UseProxy
                - !Ref ProxyServer
                - 'false'
              - |
                \";" >> /etc/apt/apt.conf || echo "Not apt system"' ]
              - |
                --==BOUNDARY==
              - |
                Content-Type: text/x-shellscript; charset="us-ascii"
              - |+
                MIME-Version: 1.0

              - |+
                #!/bin/bash -x

              - |
                function error_exit
              - |
                {
              - '  region='
              - !Ref 'AWS::Region'
              - |+

              - |2
                  instance_id=$(curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/instance-id)
              - |2
                  log_dir=/home/logs/compute
              - |2
                  mkdir -p ${log_dir}
              - |2
                  echo "Reporting instance as unhealthy and dumping logs to ${log_dir}/${instance_id}.tar.gz"
              - |2
                  tar -czf ${log_dir}/${instance_id}.tar.gz /var/log
              - |2
                  aws --region ${region} autoscaling set-instance-health --instance-id ${instance_id} --health-status Unhealthy
              - '  cfn-signal ${proxy_args} --exit-code=1 --reason="$1" --stack='
              - !Ref 'AWS::StackName'
              - |2
                 --resource=ComputeFleet --region=${region}
              - |2
                  exit 1
              - |
                }
              - |
                function vendor_cookbook
              - |
                {
              - |2
                  mkdir /tmp/cookbooks
              - |2
                  cd /tmp/cookbooks
              - |2
                  tar -xzf /etc/chef/aws-parallelcluster-cookbook.tgz
              - |2
                  HOME_BAK="${HOME}"
              - |2
                  export HOME="/tmp"
              - |2
                  . /tmp/proxy.sh;
              - |2
                  for d in `ls /tmp/cookbooks`; do
              - |2
                    cd /tmp/cookbooks/$d
              - |2
                    LANG=en_US.UTF-8 /opt/chef/embedded/bin/berks vendor /etc/chef/cookbooks --delete || error_exit 'Vendoring cookbook failed.'
              - |2
                  done;
              - |2
                  export HOME="${HOME_BAK}"
              - |
                }
              - |
                function bootstrap_instance
              - |
                {
              - |2
                  which yum 2>/dev/null; yum=$?
              - |2
                  which apt-get 2>/dev/null; apt=$?
              - |2
                  if [ "${yum}" == "0" ]; then
              - |2
                    yum -y groupinstall development && yum -y install curl wget jq awscli
              - |2
                  fi
              - |2
                  if [ "${apt}" == "0" ]; then
              - |2
                    apt-cache search build-essential; apt-get clean; apt-get update; apt-get -y install build-essential curl wget jq python-setuptools awscli
              - |2
                  fi
              - |2
                  [[ ${_region} =~ ^cn- ]] && s3_url="cn-north-1.amazonaws.com.cn/cn-north-1-aws-parallelcluster"
              - |2
                  which cfn-init 2>/dev/null || ( curl -s -L -o /tmp/aws-cfn-bootstrap-latest.tar.gz https://s3.${s3_url}/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz; easy_install -U /tmp/aws-cfn-bootstrap-latest.tar.gz)
              - |2
                  mkdir -p /etc/chef && chown -R root:root /etc/chef
              - |2
                  curl --retry 3 -L https://www.chef.io/chef/install.sh | bash -s -- -v ${chef_version}
              - |2
                  /opt/chef/embedded/bin/gem install --no-rdoc --no-ri ridley:${ridley_version} berkshelf:${berkshelf_version} ffi-libarchive
              - |2
                  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz ${cookbook_url}
              - |2
                  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.date ${cookbook_url}.date
              - |2
                  curl --retry 3 -s -L -o /etc/chef/aws-parallelcluster-cookbook.tgz.md5 ${cookbook_url}.md5
              - |2
                  vendor_cookbook
              - |2
                  mkdir /opt/parallelcluster && echo ${parallelcluster_version} | tee /opt/parallelcluster/.bootstrapped
              - |
                }
              - proxy=
              - !Ref ProxyServer
              - |+

              - custom_cookbook=
              - !Ref CustomChefCookbook
              - |+

              - |
                if [ "${proxy}" != "NONE" ]; then
              - |2
                  proxy_args="--http-proxy=${proxy} --https-proxy=${proxy}"
              - |2
                  proxy_host=$(echo "${proxy}" | awk -F/ '{print $3}' | cut -d: -f1)
              - |2
                  proxy_port=$(echo "${proxy}" | awk -F/ '{print $3}' | cut -d: -f2)
              - |2
                  export http_proxy=${proxy}; export https_proxy=${http_proxy}
              - |2
                  export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}
              - |2
                  export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
              - |2
                  echo -e "export http_proxy=${proxy}; export https_proxy=${http_proxy}
                export HTTP_PROXY=${proxy}; export HTTPS_PROXY=${http_proxy}
                export no_proxy=169.254.169.254; export NO_PROXY=169.254.169.254
                " >/tmp/proxy.sh
              - |2
                  echo -e "[Boto]
                proxy = ${proxy_host}
                proxy_port = ${proxy_port}
                " >/etc/boto.cfg
              - |
                else
              - |2
                  proxy_args=""
              - |2
                  touch /tmp/proxy.sh
              - |
                fi
              - '  export _region='
              - !Ref 'AWS::Region'
              - |+

              - s3_url=
              - !FindInMap 
                - Partition2Url
                - !Ref 'AWS::Partition'
                - url
              - |+

              - |
                if [ "${custom_cookbook}" != "NONE" ]; then
              - |2
                  cookbook_url=${custom_cookbook}
              - |
                else
              - '  cookbook_url=https://s3.${_region}.${s3_url}/${_region}-aws-parallelcluster/cookbooks/'
              - !FindInMap 
                - PackagesVersions
                - default
                - cookbook
              - |
                .tgz
              - |
                fi
              - >
                export
                PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin
              - export parallelcluster_version=aws-parallelcluster-
              - !FindInMap 
                - PackagesVersions
                - default
                - parallelcluster
              - |+

              - export cookbook_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - cookbook
              - |+

              - export chef_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - chef
              - |+

              - export ridley_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - ridley
              - |+

              - export berkshelf_version=
              - !FindInMap 
                - PackagesVersions
                - default
                - berkshelf
              - |+

              - |
                if [ -f /opt/parallelcluster/.bootstrapped ]; then
              - |2
                  installed_version=$(cat /opt/parallelcluster/.bootstrapped)
              - |2
                  if [ "${parallelcluster_version}" != "${installed_version}" ]; then
              - |2
                    bootstrap_instance
              - |2
                  fi
              - |
                else
              - |2
                  bootstrap_instance
              - |
                fi
              - |
                if [ "${custom_cookbook}" != "NONE" ]; then
              - |2
                  curl --retry 3 -v -L -o /etc/chef/aws-parallelcluster-cookbook.tgz -z "$(cat /etc/chef/aws-parallelcluster-cookbook.tgz.date)" ${cookbook_url}
              - |2
                  vendor_cookbook
              - |
                fi
              - |
                cd /tmp
              - |+

              - >
                while [ "${masterServerStatus}" != "CREATE_COMPLETE" ] && [
                "${masterServerStatus}" != "UPDATE_COMPLETE" ]
              - |
                do
              - |
                sleep 3
              - >-
                masterServerStatus=$(aws cloudformation describe-stack-resource
                --stack-name 
              - !Ref 'AWS::StackName'
              - ' --logical-resource-id MasterServerWaitCondition --region '
              - !Ref 'AWS::Region'
              - |2
                 --query StackResourceDetail.ResourceStatus --output text 2>/dev/null)
              - |
                done
              - |+

              - |
                # Call CloudFormation
              - 'cfn-init ${proxy_args} -s '
              - !Ref 'AWS::StackName'
              - ' -v -c default -r ComputeServerLaunchTemplate --region '
              - !Ref 'AWS::Region'
              - |2
                 || error_exit 'Failed to run cfn-init. If --norollback was specified, check /var/log/cfn-init.log and /var/log/cloud-init-output.log.'
              - >-
                cfn-signal ${proxy_args} --exit-code=0 --reason="ComputeServer
                setup complete" --stack=
              - !Ref 'AWS::StackName'
              - ' --resource=ComputeFleet --region='
              - !Ref 'AWS::Region'
              - |+

              - |
                # End of file
              - |
                --==BOUNDARY==
    Metadata:
      Comment: AWS ParallelCluster Compute server
      'AWS::CloudFormation::Init':
        configSets:
          default:
            - deployConfigFiles
            - chefPrepEnv
            - shellRunPreInstall
            - chefConfig
            - shellRunPostInstall
            - chefFinalize
        deployConfigFiles:
          files:
            /tmp/dna.json:
              mode: '000644'
              owner: root
              group: root
              content:
                cfncluster:
                  stack_name: !Ref 'AWS::StackName'
                  enable_efa: !Ref EFA
                  cfn_raid_parameters: !Ref RAIDOptions
                  cfn_preinstall: !Ref PreInstallScript
                  cfn_preinstall_args: NONE
                  cfn_postinstall: NONE
                  cfn_postinstall_args: NONE
                  cfn_region: !Ref 'AWS::Region'
                  cfn_efs: !If 
                    - CreateEFSSubstack
                    - !GetAtt 
                      - EFSSubstack
                      - Outputs.FileSystemId
                    - ''
                  cfn_efs_shared_dir: !Ref EFSOptions
                  cfn_fsx_fs_id: ''
                  cfn_fsx_options: 'NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE'
                  cfn_scheduler: !Ref Scheduler
                  cfn_scheduler_slots: !If 
                    - DisableHyperthreading
                    - !Select 
                      - '1'
                      - !Ref Cores
                    - !Ref 'AWS::NoValue'
                  cfn_scaledown_idletime: !Ref ScaleDownIdleTime
                  cfn_encrypted_ephemeral: 'false'
                  cfn_ephemeral_dir: /scratch
                  cfn_shared_dir: !Ref SharedDir
                  cfn_proxy: !Ref ProxyServer
                  cfn_sqs_queue: !Ref SQS
                  cfn_master: !GetAtt 
                    - MasterServer
                    - PrivateDnsName
                  cfn_node_type: ComputeFleet
                  cfn_cluster_user: !FindInMap 
                    - OSFeatures
                    - !Ref BaseOS
                    - User
                  enable_intel_hpc_platform: 'false'
                run_list: !Sub 'recipe[aws-parallelcluster::${Scheduler}_config]'
            /etc/chef/client.rb:
              mode: '000644'
              owner: root
              group: root
              content: !Join 
                - ''
                - - 'cookbook_path [''/etc/chef/cookbooks'']'
            /tmp/extra.json:
              mode: '000644'
              owner: root
              group: root
              content: '{"cluster": {"cfn_scheduler_slots": "cores"}}'
          commands:
            mkdir:
              command: mkdir -p /etc/chef/ohai/hints
            touch:
              command: touch /etc/chef/ohai/hints/ec2.json
            jq:
              command: >-
                jq --argfile f1 /tmp/dna.json --argfile f2 /tmp/extra.json -n
                '$f1 + $f2 | .cfncluster = $f1.cfncluster + $f2.cfncluster' >
                /etc/chef/dna.json || ( echo "jq not installed"; cp
                /tmp/dna.json /etc/chef/dna.json )
        chefPrepEnv:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json --override-runlist
                aws-parallelcluster::_prep_env
              cwd: /etc/chef
        shellRunPreInstall:
          commands:
            runpreinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -preinstall
        chefConfig:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json
              cwd: /etc/chef
        shellRunPostInstall:
          commands:
            runpostinstall:
              command: /opt/parallelcluster/scripts/fetch_and_run -postinstall
        chefFinalize:
          commands:
            chef:
              command: >-
                chef-client --local-mode --config /etc/chef/client.rb
                --log_level auto --force-formatter --no-color --chef-zero-port
                8889 --json-attributes /etc/chef/dna.json --override-runlist
                aws-parallelcluster::finalize
              cwd: /etc/chef
  MasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to the Master host
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: !Ref AccessFrom
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref AccessFrom
        - !If 
          - EnableDCV
          - IpProtocol: tcp
            FromPort: !Select 
              - '1'
              - !Split 
                - ','
                - !Ref DCVOptions
            ToPort: !Select 
              - '1'
              - !Split 
                - ','
                - !Ref DCVOptions
            CidrIp: !Select 
              - '2'
              - !Split 
                - ','
                - !Ref DCVOptions
          - !Ref 'AWS::NoValue'
  MasterSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref ComputeSecurityGroup
      GroupId: !Ref MasterSecurityGroup
  ComputeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow access to resources in subnets behind front
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref MasterSecurityGroup
          IpProtocol: '-1'
          FromPort: 0
          ToPort: 65535
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref AccessFrom
  ComputeSecurityGroupEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
      DestinationSecurityGroupId: !Ref ComputeSecurityGroup
      GroupId: !Ref ComputeSecurityGroup
  ComputeSecurityGroupNormalEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
      CidrIp: 0.0.0.0/0
      GroupId: !Ref ComputeSecurityGroup
    DependsOn: ComputeSecurityGroupEgress
  ComputeSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref ComputeSecurityGroup
      GroupId: !Ref ComputeSecurityGroup
  MasterENI:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: AWS ParallelCluster Master Server
      SubnetId: !Ref MasterSubnetId
      SourceDestCheck: false
      GroupSet: 
        - !Ref MasterSecurityGroup
  AWSBatchStack:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn:
      - CleanupResourcesCustomResource
    Properties:
      Parameters:
        AttributeTags: !Sub 
          - '${BaseOS}, ${Scheduler}, ${version}'
          - version: !FindInMap 
              - PackagesVersions
              - default
              - parallelcluster
        S3Url: !FindInMap 
          - Partition2Url
          - !Ref 'AWS::Partition'
          - url
        FileSystemTags: !Sub 
          - 'efs=${efs}, multiebs=${NumberOfEBSVol}, raid=${raid}'
          - efs: !If 
              - CreateEFSSubstack
              - '1'
              - '0'
            raid: !If 
              - CreateRAIDSubstack
              - '1'
              - '0'
        EFSSharedDir: !Select 
          - '0'
          - !Split 
            - ','
            - !Ref EFSOptions
        EFSFSId: !If 
          - CreateEFSSubstack
          - !GetAtt 
            - EFSSubstack
            - Outputs.FileSystemId
          - !Ref 'AWS::NoValue'
        MinvCpus: !Ref MinSize
        DesiredvCpus: !Ref DesiredSize
        MaxvCpus: !Ref MaxSize
        InstanceTypes: !Ref ComputeInstanceType
        Subnet: !Ref ComputeSubnetId
        SecurityGroups: !Join 
          - ','
          - - !Ref ComputeSecurityGroup
        OS: !Ref BaseOS
        ClusterName: !Ref 'AWS::StackName'
        ClusterType: !Ref ClusterType
        KeyName: !Ref KeyName
        SpotBidPercentage: !If 
          - UseSpotPrice
          - !Ref SpotPrice
          - !Ref 'AWS::NoValue'
        ResourcesS3Bucket: !Ref ResourcesS3Bucket
        SharedDir: !Ref SharedDir
        RAIDSharedDir: !Select 
          - '0'
          - !Split 
            - ','
            - !Ref RAIDOptions
      TemplateURL: !Sub 
          - >-
            https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/batch-substack-${version}.cfn.json
          - s3_url: !FindInMap 
              - Partition2Url
              - !Ref 'AWS::Partition'
              - url
            version: !FindInMap 
              - PackagesVersions
              - default
              - parallelcluster
    Condition: CreateAWSBatchStack
  AssociateEIP:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt 
        - MasterEIP
        - AllocationId
      NetworkInterfaceId: !Ref MasterENI
    Condition: MasterPublicIp
  DynamicPlacementGroup:
    Type: 'AWS::EC2::PlacementGroup'
    Properties:
      Strategy: cluster
    Condition: CreatePlacementGroup
  CleanupResourcesFunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
                Sid: CloudWatchLogsPolicy
              - Action:
                  - 's3:DeleteBucket'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}'
                  - !Sub 'arn:${AWS::Partition}:s3:::${ResourcesS3Bucket}/*'
                Sid: S3BucketPolicy
            Version: 2012-10-17
          PolicyName: LambdaPolicy
    Condition: HasResourcesS3Bucket
  CleanupResourcesCustomResource:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ResourcesS3Bucket: !Ref ResourcesS3Bucket
      ServiceToken: !GetAtt 
        - CleanupResourcesFunction
        - Arn
    DependsOn:
      - CleanupResourcesFunctionLogGroup
    Condition: HasResourcesS3Bucket
  CleanupResourcesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref ResourcesS3Bucket
        S3Key: custom_resources_code/artifacts.zip
      Handler: cleanup_resources.handler
      MemorySize: 128
      Role: !GetAtt 
        - CleanupResourcesFunctionExecutionRole
        - Arn
      Runtime: python3.6
      Timeout: 60
    Condition: HasResourcesS3Bucket
  CleanupResourcesFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CleanupResourcesFunction}'
      RetentionInDays: 1
    Condition: HasResourcesS3Bucket
  LambdaCleanupRolePolicies:
    Type: 'AWS::Lambda::Function'
    Properties:
      Timeout: '300'
      Runtime: nodejs12.x
      Handler: index.handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Code:
        ZipFile: !Join 
          - |+

          - - var AWS = require('aws-sdk');
            - var response = require('cfn-response');
            - 'exports.handler = function (event, context) {'
            - '    if (event.RequestType === ''Delete'') {'
            - '        var iam = new AWS.IAM();'
            - '        var RoleName = event.ResourceProperties.RoleName;'
            - '        iam.listRolePolicies({RoleName: RoleName}, function (error, data) {'
            - '            if (error) {'
            - '                console.error(''error:\n'', JSON.stringify(error));'
            - '                response.send(event, context, response.FAILED);'
            - '            } else {'
            - '                var promises = [];'
            - '                data.PolicyNames.forEach(function (PolicyName) {'
            - '                    if (/^BlockInstance_/.test(PolicyName)) {'
            - '                        console.log(''deleteRolePolicy: '' + PolicyName);'
            - '                        promises.push(iam.deleteRolePolicy({RoleName: RoleName, PolicyName: PolicyName}).promise());'
            - '                    }'
            - '                });'
            - '                Promise.all(promises).then(function (data) {'
            - '                    response.send(event, context, response.SUCCESS);'
            - '                }).catch(function (error) {'
            - '                    console.error(''error:\n'', JSON.stringify(error));'
            - '                    response.send(event, context, response.FAILED);'
            - '                });'
            - '            }'
            - '        });'
            - '    } else {'
            - '        response.send(event, context, response.SUCCESS);'
            - '    }'
            - '};'
  CleanupRolePolicies:
    Type: 'Custom::CleanupRolePolicies'
    Properties:
      ServiceToken: !GetAtt 
        - LambdaCleanupRolePolicies
        - Arn
      RoleName: !Ref RootRole
  RAIDSubstack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        RAIDOptions: !Ref RAIDOptions
        AvailabilityZone: !Ref AvailabilityZone
      TemplateURL: !Sub 
        - >-
          https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/raid-substack-${version}.cfn.json
        - s3_url: !FindInMap 
            - Partition2Url
            - !Ref 'AWS::Partition'
            - url
          version: !FindInMap 
            - PackagesVersions
            - default
            - parallelcluster
    Condition: CreateRAIDSubstack
  EBSCfnStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      Parameters:
        AvailabilityZone: !Ref AvailabilityZone
        VolumeSize: '20,20,20,20,20'
        VolumeType: 'gp2,gp2,gp2,gp2,gp2'
        VolumeIOPS: '100,100,100,100,100'
        EBSEncryption: 'false,false,false,false,false'
        EBSKMSKeyId: 'NONE,NONE,NONE,NONE,NONE'
        EBSVolumeId: 'NONE,NONE,NONE,NONE,NONE'
        EBSSnapshotId: 'snap-042cd29059e131785,NONE,NONE,NONE,NONE'
        NumberOfEBSVol: !Ref NumberOfEBSVol
      TemplateURL: !Sub 
        - >-
          https://s3.${AWS::Region}.${s3_url}/${AWS::Region}-aws-parallelcluster/templates/ebs-substack-${version}.cfn.json
        - s3_url: !FindInMap 
            - Partition2Url
            - !Ref 'AWS::Partition'
            - url
          version: !FindInMap 
            - PackagesVersions
            - default
            - parallelcluster
Outputs:
  ClusterUser:
    Description: Username to login to Master host
    Value: !FindInMap 
      - OSFeatures
      - !Ref BaseOS
      - User
  MasterPrivateIP:
    Description: Private IP Address of the Master host
    Value: !GetAtt 
      - MasterServer
      - PrivateIp
  MasterPublicIP:
    Description: Public IP Address of the Master host
    Value: !GetAtt 
      - MasterServer
      - PublicIp
    Condition: MasterPublicIp
  BatchComputeEnvironmentArn:
    Value: !GetAtt 
      - AWSBatchStack
      - Outputs.ComputeEnvironmentArn
    Condition: CreateAWSBatchStack
  BatchJobQueueArn:
    Value: !GetAtt 
      - AWSBatchStack
      - Outputs.JobQueueArn
    Condition: CreateAWSBatchStack
  BatchJobDefinitionArn:
    Value: !GetAtt 
      - AWSBatchStack
      - Outputs.JobDefinitionArn
    Condition: CreateAWSBatchStack
  BatchJobDefinitionMnpArn:
    Value: !GetAtt 
      - AWSBatchStack
      - Outputs.MNPJobDefinitionArn
    Condition: CreateAWSBatchStack
  BatchUserRole:
    Value: !GetAtt 
      - AWSBatchStack
      - Outputs.BatchUserRole
    Condition: CreateAWSBatchStack
